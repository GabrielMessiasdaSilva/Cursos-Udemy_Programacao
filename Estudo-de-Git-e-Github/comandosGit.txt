// Certifique-se de estar dentro do seu usuário, para isso use 'cd C:/Users/<Nome_do_Usuario>

// Lembre-se de estar dentro do repositorio o qual você quer alterar, para fazer isso utilize o comando cd
// Ou crie um repositorio através do coamndo 'mkdir <Nome_do_repositorio>' e entre nele, através do cd

// Após isso utilize o comando 'git init' para inicializar o seu repositório como um repositório git, lá terá uma pasta oculta com informações.

/* Comandos para configurar o git 
$ git config --global user.name "@username"  
$ git config --global user.email "email@gmail.com"
$ git config --global core.editor sub //edita o editor que preferencialmente vc usa

COMANDOS PARA CHECAR ESSAS CONFIG
$ git config user.name
$ git config user.email
$ git config --list
*/

Limpar credenciais

 git config --global --unset user.name
 git config --global --unset user.email

Limpar as informações de credenciais globais guardadas
 git config --global --unset credential.helper

Apagar as informações de credenciais contidas no sistema
 git config --system --unset credential.helper


COMANDOS DE NAVEGAÇÃO
$ cd
$ ls
$ dir
$ cd ..
$ cd <arq>/
$ cd /

MANIPULÇÃO DOS ARQUIVOS
$ git status (Irá te atualizar algumas informações referentes ao estado do repositório)
$ git add -A ou <nome do arquivo> //Adiciona todos os arquivos que faltam, ou somente um arquivo em especifico
$ git commit -m "blablabla" //Confirma e salva as alterações feitas na sua maquina
$ git commit -am "blablabla" //A mesma coisa do anterior, porém não é necessario utilizar o add
$ git log //Mostra o histórico dos seus commits
$ git reset --soft (Volta para um commit desejado, preservando as aplicações feitas antes do seu ultimo commit e com tudo adicionado)
$ git reset --mixed (Faz a mesma coisa do anterior, porém não estará adicionado para o commit)
$ git reset --hard (Volta para um commit desejado, sem preservar nada do commit atual)//NÃO É RECOMENDADO PARATRABLHO EM EQUIPE
$ git branch //Mostra em qual branch voce está
$ git branch <nome_da_branch> //Cria uma nova branch
$ git checkout <Nome_da_branch>  //Navega entre as branchs existentes
$ git diff //Mostra exatamente o que foi alterado em cada arquivo existente antes de realizar o commit
$ git diff --name-only //Mostra os arquivos que houve alterações
$ git diff <nome do arquivo> //Mostra exatamente o que foi alterado em um arquivo especifico
$ git checkout HEAD -- <Nome do aqr>   //Cancela as alterações deita em um arquivo antes de commitar
$ git ignore (<Nome do arquivo> or *.<extensão dos arquivos>)



MANIPULÇÃO DOS ARQUIVOS REMOTOS
$ ssh-keygen -t ed25519 -C "your_email@example.com"  //Criar uma ssh key
//Abra o arquivo pub e copie o conteudo dentro
//Dentro do github, acesse settings, ssh and gpg keys, cole a chave e colque um titulo

/*Após isso, para estabelecer a conexão utilize o seguintes códigos

git remote add origin <link que estará na pagina do seu repositorio>
$ git remote //Mostra para voce sua conexão adicionada
$ git remote -v

*/

$ git push -u origin <Nome_da_Branch> //envia uma branch/suas alterações para o github
$ git revert --no-edit <codigo_do_commit>  //Volta para um commite desejado, sem perder seu código
$ git push origin teste //envia uma branch/suas alterações para o github
$ git push origin :teste //Deleta uma branch do seu repositório remoto
$ git branch -D teste //Deleta uma branch do seu repositório local
$ git pull origin master  //puxa as informações do seu repositorio remoto para o local


OBS:
// Antes de dar o push, dê um pull, pois isso evita muitos problemas e deixa tudo atualizado, evitando erros

Video de suporte: https://youtu.be/OuOb1_qADBQ